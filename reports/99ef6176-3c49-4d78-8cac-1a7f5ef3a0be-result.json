{"name": "test_6_orders_menu_btn_in_english_language", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_orders.TestTORADO object at 0x0000019BB3875150>\nsetUp = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f5b563e1ab3789006f3d4cb71f50c246\")>\n\n    def test_6_orders_menu_btn_in_english_language(self, setUp):\n        self.orders_page.click_order_btn()\n        self.orders_page.click_orders_menu_btn()\n        self.orders_page.click_english_language_btn()\n>       assert self.orders_page.menu_window_display()\n\ntests\\test_orders.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\pages\\orders_page.py:54: in menu_window_display\n    x =WebDriverWait(self.driver, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f5b563e1ab3789006f3d4cb71f50c246\")>\nmethod = <function invisibility_of_element_located.<locals>._predicate at 0x0000019BB4116AC0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1681983290841, "stop": 1681983305394, "uuid": "e0238c5f-e44e-4241-938d-a3258d8e85ce", "historyId": "71249ccab65663fc97e22f15267f7dda", "testCaseId": "362988560cef794b11ea0e7406a9a9b3", "fullName": "tests.test_orders.TestTORADO#test_6_orders_menu_btn_in_english_language", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestTORADO"}, {"name": "host", "value": "LAPTOP-FNNFR7ER"}, {"name": "thread", "value": "23120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}